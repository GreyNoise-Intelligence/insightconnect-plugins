# GENERATED BY KOMAND SDK - DO NOT EDIT
import komand
import json


class Component:
    DESCRIPTION = "DEPRECATED Get a list of accounts"


class Input:
    ACCOUNTIDS = "accountIds"
    COUNTONLY = "countOnly"
    CURSOR = "cursor"
    IDS = "ids"
    LIMIT = "limit"
    QUERY = "query"
    SITEIDS = "siteIds"
    SKIP = "skip"
    SKIPCOUNT = "skipCount"
    SORTBY = "sortBy"
    SORTORDER = "sortOrder"
    

class Output:
    DATA = "data"
    PAGINATION = "pagination"
    

class PrivateAccountsInput(komand.Input):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "accountIds": {
      "type": "string",
      "title": "Account IDs",
      "description": "List of Account IDs to filter by. Example 225494730938493804,225494730938493915",
      "order": 8
    },
    "countOnly": {
      "type": "boolean",
      "title": "Count Only",
      "description": "If true, only total number of items will be returned, without any of the actual objects",
      "order": 10
    },
    "cursor": {
      "type": "string",
      "title": "Cursor",
      "description": "Cursor position returned by the last request. Should be used for iterating over more than 1000 items. Example YWdlbnRfaWQ6NTgwMjkzODE=",
      "order": 11
    },
    "ids": {
      "type": "string",
      "title": "IDs",
      "description": "A list of account IDs. Example 225494730938493804,225494730938493915",
      "order": 2
    },
    "limit": {
      "type": "integer",
      "title": "Limit",
      "description": "Limit number of returned items (1-100). Example 10",
      "order": 9
    },
    "query": {
      "type": "string",
      "title": "Query",
      "description": "Filtered query",
      "order": 1
    },
    "siteIds": {
      "type": "string",
      "title": "Site IDs",
      "description": "List of Site IDs to filter by. Example 225494730938493804,225494730938493915",
      "order": 7
    },
    "skip": {
      "type": "integer",
      "title": "Skip",
      "description": "Skip first number of items (0-1000). For iterating over more than a 1000 items please use cursor instead. Example 150",
      "order": 4
    },
    "skipCount": {
      "type": "boolean",
      "title": "Skip Count",
      "description": "If true, total number of items will not be calculated, which speeds up execution time",
      "order": 3
    },
    "sortBy": {
      "type": "string",
      "title": "Sort By",
      "description": "The column to sort the results by. Example id",
      "enum": [
        "id",
        "name"
      ],
      "order": 5
    },
    "sortOrder": {
      "type": "string",
      "title": "Sort Order",
      "description": "Sort direction. Example asc",
      "enum": [
        "asc",
        "desc"
      ],
      "order": 6
    }
  }
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)


class PrivateAccountsOutput(komand.Output):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "data": {
      "type": "array",
      "title": "Response Data",
      "items": {
        "$ref": "#/definitions/private_account"
      },
      "order": 1
    },
    "pagination": {
      "$ref": "#/definitions/pagination",
      "title": "Pagination",
      "description": "Pagination information",
      "order": 2
    }
  },
  "definitions": {
    "pagination": {
      "type": "object",
      "title": "pagination",
      "properties": {
        "nextCursor": {
          "type": "string",
          "title": "Next Cursor",
          "description": "Next cursor",
          "order": 2
        },
        "totalItems": {
          "type": "integer",
          "title": "Total Items",
          "description": "Total items",
          "order": 1
        }
      }
    },
    "private_account": {
      "type": "object",
      "title": "private_account",
      "properties": {
        "createAt": {
          "type": "string",
          "title": "Create At",
          "order": 1
        },
        "id": {
          "type": "string",
          "title": "ID",
          "order": 2
        },
        "name": {
          "type": "string",
          "title": "Name",
          "order": 4
        },
        "updatedAt": {
          "type": "string",
          "title": "Updated At",
          "order": 3
        }
      }
    }
  }
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)
