# GENERATED BY KOMAND SDK - DO NOT EDIT
import komand
import json


class Component:
    DESCRIPTION = "Fetches full list of installed applications from applicable agents matching the input filter, and replaces existing data in the management console"


class Input:
    DATA = "data"
    FILTER = "filter"
    

class Output:
    AFFECTED = "affected"
    

class AgentsFetchFirewallRulesInput(komand.Input):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "data": {
      "$ref": "#/definitions/agents_firewall_logging_data",
      "title": "Data",
      "description": "Data instructions for report",
      "order": 1
    },
    "filter": {
      "$ref": "#/definitions/agents_fetch_applications_filter",
      "title": "Filter JSON",
      "description": "Applied filter - only matched agents will be affected by the requested action. Leave empty to apply the action on all applicable agents",
      "order": 2
    }
  },
  "required": [
    "data",
    "filter"
  ],
  "definitions": {
    "agents_fetch_applications_filter": {
      "type": "object",
      "title": "agents_fetch_applications_filter",
      "properties": {
        "accountIds": {
          "type": "array",
          "title": "Account IDs",
          "description": "List of Account IDs to filter by",
          "items": {
            "type": "string"
          },
          "order": 8
        },
        "filterId": {
          "type": "string",
          "title": "Filter ID",
          "description": "Include all agents matching this saved filter",
          "order": 6
        },
        "groupIds": {
          "type": "array",
          "title": "Group IDs",
          "description": "A list of network groups",
          "items": {
            "type": "string"
          },
          "order": 5
        },
        "ids": {
          "type": "array",
          "title": "IDs",
          "description": "A list of Agent IDs",
          "items": {
            "type": "string"
          },
          "order": 4
        },
        "isDecommissioned": {
          "type": "array",
          "title": "Is decomissioned",
          "description": "Include active decommissioned or both",
          "items": {
            "type": "boolean"
          },
          "order": 1
        },
        "isUninstalled": {
          "type": "boolean",
          "title": "Is uninstalled",
          "description": "Only include uninstalled agents",
          "order": 2
        },
        "query": {
          "type": "string",
          "title": "Query",
          "description": "A free-text search term, will match applicable attributes (sub-string match). Note - Devices physical addresses will be matched if they start with the search term only (instead of being matched if they contain the term)",
          "order": 3
        },
        "siteIds": {
          "type": "array",
          "title": "Site IDs",
          "description": "List of Site IDs to filter by",
          "items": {
            "type": "string"
          },
          "order": 7
        }
      }
    },
    "agents_firewall_logging_data": {
      "type": "object",
      "title": "agents_firewall_logging_data",
      "properties": {
        "reportLog": {
          "type": "boolean",
          "title": "Repoort log",
          "description": "Report blocking activity to log",
          "order": 2
        },
        "reportMgmt": {
          "type": "boolean",
          "title": "Repoort management",
          "description": "Report blocking activity to management",
          "order": 1
        }
      },
      "required": [
        "reportLog",
        "reportMgmt"
      ]
    }
  }
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)


class AgentsFetchFirewallRulesOutput(komand.Output):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "affected": {
      "type": "integer",
      "title": "Affected",
      "description": "Number of entities affected by the requested operation",
      "order": 1
    }
  }
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)
