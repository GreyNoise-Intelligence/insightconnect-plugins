# GENERATED BY KOMAND SDK - DO NOT EDIT
import komand
import json


class Component:
    DESCRIPTION = "Return identified malware threats at a customer or regional grid level"


class Input:
    COMPRESS = "compress"
    END_DATE = "end_date"
    FEED_TYPE = "feed_type"
    FILE_TYPE = "file_type"
    START_DATE = "start_date"
    TOKEN = "token"
    

class Output:
    CSV_LINES = "csv_lines"
    STIX_OBJECTS = "stix_objects"
    

class GetThreatIntelFeedInput(komand.Input):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "compress": {
      "type": "string",
      "title": "Compress",
      "description": "Compress multiple feed files",
      "default": false,
      "order": 3
    },
    "end_date": {
      "type": "string",
      "title": "End Date",
      "description": "End Date in the ISO 8601 date time format (e.g. 2011-12-03T10:15:30+0000). Default is current date",
      "order": 2
    },
    "feed_type": {
      "type": "string",
      "title": "Feed Type",
      "description": "The scope of data to return, either for the account, or for the regions grid",
      "default": "malware_customer",
      "enum": [
        "malware_customer",
        "malware_grid"
      ],
      "order": 5
    },
    "file_type": {
      "type": "string",
      "title": "File Type",
      "description": "File type of respective feed",
      "default": "csv",
      "enum": [
        "csv",
        "stix"
      ],
      "order": 4
    },
    "start_date": {
      "type": "string",
      "title": "Start Date",
      "description": "Start Date in the ISO 8601 date time format (e.g. 2011-12-03T10:15:30+0000). Default is 7 days before current date",
      "order": 1
    },
    "token": {
      "type": "string",
      "title": "Token",
      "description": "Secure ID of the threat feed file that was previously downloaded. The Secure ID is included in every response",
      "order": 6
    }
  }
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)


class GetThreatIntelFeedOutput(komand.Output):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "csv_lines": {
      "type": "array",
      "title": "CSV Lines",
      "description": "List of csv lines",
      "items": {
        "type": "string"
      },
      "order": 2
    },
    "stix_objects": {
      "$ref": "#/definitions/stix_object",
      "title": "Stix Objects",
      "description": "Stix object",
      "order": 1
    }
  },
  "definitions": {
    "stix_object": {
      "type": "object",
      "title": "stix_object",
      "properties": {
        "id": {
          "type": "string",
          "title": "ID",
          "description": "Stix ID",
          "order": 1
        },
        "objects": {
          "type": "array",
          "title": "Objects",
          "description": "Objects",
          "items": {
            "type": "object"
          },
          "order": 2
        },
        "spec_version": {
          "type": "string",
          "title": "Spec Version",
          "description": "Spec version",
          "order": 3
        },
        "type": {
          "type": "string",
          "title": "Type",
          "description": "Type",
          "order": 4
        }
      }
    }
  }
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)
