# GENERATED BY KOMAND SDK - DO NOT EDIT
import komand
import json


class Component:
    DESCRIPTION = "Reject a currently held message based"


class Input:
    IDS = "ids"
    MESSAGE = "message"
    NOTIFY = "notify"
    REASON_TYPE = "reason_type"
    

class Output:
    ID = "id"
    REJECT = "reject"
    

class RejectMessageInput(komand.Input):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "ids": {
      "type": "array",
      "title": "IDS",
      "description": "An array of Mimecast secure ids for messages to be rejected",
      "items": {
        "type": "string"
      },
      "order": 1
    },
    "message": {
      "type": "string",
      "title": "Message",
      "description": "Rejection message to be returned to sender",
      "order": 2
    },
    "notify": {
      "type": "boolean",
      "title": "Notify",
      "description": "Deliever a rejection notification to the sender",
      "default": false,
      "order": 4
    },
    "reason_type": {
      "type": "string",
      "title": "Reason Type",
      "description": "The reason code for rejecting the message",
      "enum": [
        "MESSAGE CONTAINS UNDESIRABLE CONTENT",
        "MESSAGE CONTAINS CONFIDENTIAL INFORMATION",
        "REVIEWER DISAPPROVES OF CONTENT",
        "INAPPROPRIATE COMMUNICATION",
        "MESSAGE GOES AGAINST EMAIL POLICIES"
      ],
      "order": 3
    }
  },
  "required": [
    "ids"
  ]
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)


class RejectMessageOutput(komand.Output):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "id": {
      "type": "string",
      "title": "ID",
      "description": "The Mimecast secure ID of the message hold",
      "order": 1
    },
    "reject": {
      "type": "boolean",
      "title": "Reject",
      "description": "Returns true if the message was rejected",
      "order": 2
    }
  }
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)
